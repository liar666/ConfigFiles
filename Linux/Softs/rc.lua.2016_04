---- TODO1: Minimizing with C-A-i does not work correctly in 3.5.6 (works only if mouse is on systray) => use if mouse clic on systray
---- TODO2: Do so that the systray (icons to control running softs: dropbox, nm-applet, etc.) appears on the screen where the mouse is

-- Standard awesome library
-- GM: Gears is global so that I can change the background image with awesome-client
gears = require("gears")
local awful = require("awful")
awful.rules = require("awful.rules")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")

-- Load Debian menu entries
require("debian.menu")

-- Wallpaper test
--for s = 1, screen.count() do
--    gears.wallpaper.maximized("/home/gmuller/.pics/0002d74f.jpeg", s, true)
-- end

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
beautiful.init("/usr/share/awesome/themes/default/theme.lua")

-- GM: Load script that launches startup applications
HOME = "/home/gmuller/"
awful.util.spawn_with_shell("source " .. HOME .. ".myxsession")
-- awful.util.spawn_with_shell("source " .. HOME .. "Softs/run_ssh_add");

-- This is used later as the default terminal and editor to run.
terminal = "uxterm -bg WhiteSmoke -fg black"
editor = os.getenv("EDITOR") or "emacs"
editor_cmd = terminal .. " -e " .. editor
xlockcmd = HOME .. "Softs/run_screensaver"
minBattery = .2

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod1"

-- Table of layouts to cover with awful.layout.inc, order matters.
local layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Wallpaper
if beautiful.wallpaper then
    for s = 1, screen.count() do
        gears.wallpaper.maximized(beautiful.wallpaper, s, true)
    end
end
-- }}}

-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ "Chat-" .. s, "W1-" .. s, "W2-" .. s, "W3-" .. s, "Mail-" .. s, "Web-" .. s, "Mumule-" .. s }, s, layouts[2])
end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "Debian", debian.menu.Debian_menu.Debian },
                                    { "Terminal", terminal },
                                    --{ "PidGin", "pidgin" },
                                    { "Nautilus", "nautilus" },
                                    { "Firefox", "firefox" },
                                    { "Chromium", HOME .. ".mychromium" },
                                    { "Midori", HOME .. ".mymidori" },
                                    { "QupZilla", "qupzilla" },
                                    { "Thunderbird", "thunderbird" },
                                    { "Kodi", "kodi" },
                                    { "Xlock", xlockcmd }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock()

myxchatbox = wibox.widget.imagebox()
myxchatbox:set_image("/usr/share/icons/HighContrast/24x24/apps/xchat.png")
myxchatbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("xchat") end)))

-- mypidginbox = wibox.widget.imagebox()
-- mypidginbox:set_image("/usr/share/icons/HighContrast/24x24/apps/pidgin.png")
-- mypidginbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("pidgin") end)))

myfirefoxbox = wibox.widget.imagebox()
myfirefoxbox:set_image("/usr/lib/firefox/browser/chrome/icons/default/default32.png")
myfirefoxbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("firefox") end)))

mynautilusbox = wibox.widget.imagebox()
mynautilusbox:set_image("/usr/share/app-install/icons/nautilus-actions.svg")
mynautilusbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("nautilus --no-desktop") end)))

--myskypebox = wibox.widget.imagebox()
--myskypebox:set_image("/usr/share/icons/hicolor/24x24/apps/skype.png")
--myskypebox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("skype") end)))

mymidoribox = wibox.widget.imagebox()
mymidoribox:set_image("/usr/share/icons/hicolor/24x24/apps/midori.png")
mymidoribox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn(HOME .. ".mymidori") end)))

myqupzillabox = wibox.widget.imagebox()
myqupzillabox:set_image("/usr/share/app-install/icons/qupzilla.png")
myqupzillabox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("qupzilla") end)))

myfirefoxbox = wibox.widget.imagebox()
myfirefoxbox:set_image("/usr/lib/firefox/browser/chrome/icons/default/default32.png")
myfirefoxbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("firefox") end)))

--mychromiumbox = wibox.widget.imagebox()
--mychromiumbox:set_image("/usr/share/icons/hicolor/24x24/apps/chromium-browser.png")
--mychromiumbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn(HOME .. ".mychromium") end)))

mythunderbirdbox = wibox.widget.imagebox()
mythunderbirdbox:set_image("/usr/lib/thunderbird/chrome/icons/default/default32.png")
mythunderbirdbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("thunderbird") end)))

--myaudaciousbox = wibox.widget.imagebox()
--myaudaciousbox:set_image("/usr/share/icons/hicolor/48x48/apps/audacious.png")
--myaudaciousbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn("audacious") end)))

myxlockbox = wibox.widget.imagebox()
myxlockbox:set_image("/usr/share/hplip/data/images/32x32/lock.png")
myxlockbox:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.util.spawn(xlockcmd) end)))

mytextbox = wibox.widget.textbox()

------------------------------------ WIDGETS START
-- GM: To get the output of a shell command
function capture(cmd2Run, asNumber)
  local f = assert(io.popen(cmd2Run, 'r'), "popen failed")
  local s = assert(f:read('*a'), "read failed")
  f:close()
  -- mytextbox:set_text('VALUE=' .. s)
  if asNumber
  then
     return tonumber(s)
  end
  return s
end

--- CPU
mycpugraph0 = awful.widget.graph()
mycpugraph0:set_width(25)
mycpugraph0:set_background_color('#000000')
mycpugraph0:set_color('#F01010')
--
mycpugraph1 = awful.widget.graph()
mycpugraph1:set_width(25)
mycpugraph1:set_background_color('#000000')
mycpugraph1:set_color('#D03030')
--
mycpugraph2 = awful.widget.graph()
mycpugraph2:set_width(25)
mycpugraph2:set_background_color('#000000')
mycpugraph2:set_color('#E02020')
--
mycpugraph3 = awful.widget.graph()
mycpugraph3:set_width(25)
mycpugraph3:set_background_color('#000000')
mycpugraph3:set_color('#C04040')
--- BAT
mybatprogressbar = awful.widget.progressbar()
mybatprogressbar:set_width(10)
--mybatprogressbar:set_height(10)
mybatprogressbar:set_vertical(true)
mybatprogressbar:set_background_color('#000000')
-- mybatprogressbar:set_color('#F0F0F0')
mybatprogressbar:set_color({ type = "linear", from = { 0,0 }, to = { 0,10 }, stops = { {0, "#444444"}, {0.5, "#DDDDDD"}, {1, "#EEEEEE"}}})
--- NET
mynetgraphin = awful.widget.graph()
mynetgraphin:set_width(35)
mynetgraphin:set_background_color('#000000')
mynetgraphin:set_color('#00D000')
--
mynetgraphout = awful.widget.graph()
mynetgraphout:set_width(35)
mynetgraphout:set_background_color('#000000')
mynetgraphout:set_color('#00B000')
-- RAM / SWAP
myramgraph = awful.widget.graph()
myramgraph:set_width(30)
myramgraph:set_background_color('#000000')
myramgraph:set_color('#0000F0')
--
myswapgraph = awful.widget.graph()
myswapgraph:set_width(30)
myswapgraph:set_background_color('#000000')
myswapgraph:set_color('#00E0E0')
--
myrootfsprogressbar = awful.widget.progressbar()
myrootfsprogressbar:set_width(10)
myrootfsprogressbar:set_vertical(true)
myrootfsprogressbar:set_background_color('#000000')
-- myrootfsprogressbar:set_color('#AEAEA0')
myrootfsprogressbar:set_color({ type = "linear", from = { 0,0 }, to = { 0,10 }, stops = { {0, "#FFFFFE"}, {0.5, "#FFA175"}, {1, "#000000"}}})


-- Initializations
cpu0Last = capture(HOME .. "Softs/getCPUpercent 0", true);
cpu1Last = capture(HOME .. "Softs/getCPUpercent 1", true);
cpu2Last = capture(HOME .. "Softs/getCPUpercent 2", true);
cpu3Last = capture(HOME .. "Softs/getCPUpercent 3", true);
--
netinLast  = capture(HOME .. "Softs/getNETpercent in", true);
netoutLast = capture(HOME .. "Softs/getNETpercent out", true);
--
bat = capture(HOME .. "Softs/getBATpercent", true);
mybatprogressbar:set_value(bat);
--
rootfs = capture(HOME .. "Softs/getFSpercent root", true);
myrootfsprogressbar:set_value(rootfs);

-- Updates of the values
myhighspeedtimer = timer({ timeout = 1 })
myhighspeedtimer:connect_signal("timeout", function()

    cpu0 = capture(HOME .. "Softs/getCPUpercent 0", true);
    -- mytextbox:set_text('<span color="white">CPU VALUE=' .. cpu0)
    mycpugraph0:add_value(cpu0-cpu0Last);
    cpu0Last=cpu0
    cpu1 = capture(HOME .. "Softs/getCPUpercent 1", true);
    -- mytextbox:set_text('<span color="white">CPU VALUE=' .. cpu1)
    mycpugraph1:add_value(cpu1-cpu1Last);
    cpu1Last=cpu1
    cpu2 = capture(HOME .. "Softs/getCPUpercent 2", true);
    -- mytextbox:set_text('<span color="white">CPU VALUE=' .. cpu2)
    mycpugraph2:add_value(cpu2-cpu2Last);
    cpu2Last=cpu2
    cpu3 = capture(HOME .. "Softs/getCPUpercent 3", true);
    -- mytextbox:set_text('<span color="white">CPU VALUE=' .. cpu3)
    mycpugraph3:add_value(cpu3-cpu3Last);
    cpu3Last=cpu3
--
    ram = capture(HOME .. "Softs/getRAMpercent", true);
    myramgraph:add_value(ram);
    swap = capture(HOME .. "Softs/getSWAPpercent", true);
    myswapgraph:add_value(swap);
--
    netin = capture(HOME .. "Softs/getNETpercent in", true);
    -- mytextbox:set_text('<span color="white">NETIN VALUE=' .. netin)
    mynetgraphin:add_value(netin-netinLast);
    netinLast = netin;
    netout = capture(HOME .. "Softs/getNETpercent out", true);
    -- mytextbox:set_text('<span color="white">NETOUT VALUE=' .. netout)
    mynetgraphout:add_value(netout-netoutLast);
    netoutLast = netout;
--

end)
myhighspeedtimer:start()

mylowspeedtimer = timer({ timeout = 30 })
mylowspeedtimer:connect_signal("timeout", function()

    bat = capture(HOME .. "Softs/getBATpercent", true);
    if bat < minBattery
    then
       mybatprogressbar:set_background_color('#FFFFFF')
       --mybatprogressbar:set_color('#FF0000')
       mybatprogressbar:set_color({ type = "linear", from = { 0,0 }, to = { 0,10 }, stops = { {0, "#FF0000"}, {0.5, "#FF0000"}, {1, "#FF0000"}}})
    else
       mybatprogressbar:set_background_color('#000000')
       --mybatprogressbar:set_color('#F0F0F0')
       mybatprogressbar:set_color({ type = "linear", from = { 0,0 }, to = { 0,10 }, stops = { {0, "#444444"}, {0.5, "#DDDDDD"}, {1, "#EEEEEE"}}})
    end
    mybatprogressbar:set_value(bat);
--
    rootfs = capture(HOME .. "Softs/getFSpercent root");
    myrootfsprogressbar:set_value(rootfs);

end)
mylowspeedtimer:start()


------------------------------------ WIDGETS END

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey, "Control" }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )
mytasklist = {}
toggleminimize = function (c)
    if c == client.focus then
    c.minimized = true
    else
       -- Without this, the following
       -- :isvisible() makes no sense
       c.minimized = false
       if not c:isvisible() then
          awful.tag.viewonly(c:tags()[1])
       end
       -- This will also un-minimize
       -- the client, if needed
       client.focus = c
       c:raise()
    end
end
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, toggleminimize),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({
                                                      theme = { width = 250 }
                                                  })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "top", screen = s })

    -- Widgets that are aligned to the left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(mylauncher)
    left_layout:add(mytaglist[s])
    left_layout:add(mypromptbox[s])

    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()
    if s == 1 then right_layout:add(wibox.widget.systray()) end
    -- if s == 2 then right_layout:add(wibox.widget.systray()) end
    -- right_layout:add(wibox.widget.systray())

    right_layout:add(mycpugraph0)
    right_layout:add(mycpugraph1)
    right_layout:add(mycpugraph2)
    right_layout:add(mycpugraph3)
--
    right_layout:add(mybatprogressbar)
--
    right_layout:add(mynetgraphin)
    right_layout:add(mynetgraphout)
--
    right_layout:add(myswapgraph)
    right_layout:add(myramgraph)
--
    right_layout:add(myrootfsprogressbar)
--
    right_layout:add(myxchatbox)
    -- right_layout:add(mypidginbox)
    right_layout:add(mynautilusbox)
    -- right_layout:add(myskypebox)
    right_layout:add(mymidoribox)
    right_layout:add(myqupzillabox)
    right_layout:add(myfirefoxbox)
    -- right_layout:add(mychromiumbox)
    right_layout:add(mythunderbirdbox)
    -- right_layout:add(myaudaciousbox)
    right_layout:add(myxlockbox)
    right_layout:add(mytextbox)
    right_layout:add(mytextclock)
    right_layout:add(mylayoutbox[s])

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)

    mywibox[s]:set_widget(layout)
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey, "Control" }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey, "Control" }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey, "Control" }, "Escape", awful.tag.history.restore),

    awful.key({ modkey, "Control" }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),

    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey, "Control" }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Control" }, "q", awesome.quit),

-- GM: Cannot use KP_8/KP_2. Indeed, in my config @PreSans, the keyboard is redefined after awesome is loaded => I must use here the definition of keys as it is when awesome starts up, i.e. in standard Xorg config
    awful.key({ modkey, "Control" }, "KP_Right",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey, "Control" }, "KP_Left",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Control" }, "l",        function () awful.util.spawn(xlockcmd) end),
    awful.key({ modkey, "Control"   }, "space",  function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Control", "Shift" }, "space", function () awful.layout.inc(layouts, -1) end),

    -- Prompt
    awful.key({ modkey, "Control" },            "x",     function () mypromptbox[mouse.screen]:run() end),

--    awful.key({ modkey }, "x",
--              function ()
--                  awful.prompt.run({ prompt = "Run Lua code: " },
--                  mypromptbox[mouse.screen].widget,
--                  awful.util.eval, nil,
--                  awful.util.getdir("cache") .. "/history_eval")
--              end),

    -- Menubar
    awful.key({ modkey }, "p", function() menubar.show() end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey, "Control"   }, "k",     function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "f",       awful.client.floating.toggle                     ),
    awful.key({ modkey, "Shift" }, "Return",    function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",       awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",       function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",       function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey, "Control" }, "i",       toggleminimize), -- function (c) c.minimized = not c.minimized    end
    awful.key({ modkey, "Control" }, "a",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end)
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
    globalkeys = awful.util.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        local tag = awful.tag.gettags(screen)[i]
                        if tag then
                           awful.tag.viewonly(tag)
                        end
                  end),
        -- Toggle tag.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      local tag = awful.tag.gettags(screen)[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = awful.tag.gettags(client.focus.screen)[i]
                          if tag then
                              awful.client.movetotag(tag)
                          end
                     end
                  end),
        -- Toggle tag.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = awful.tag.gettags(client.focus.screen)[i]
                          if tag then
                              awful.client.toggletag(tag)
                          end
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey, "Control" }, 1, awful.mouse.client.move),
    awful.button({ modkey, "Control" }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "QEMU" },
      properties = { floating = true } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "gimp" },
      properties = { floating = true } },
    { rule = { class = "Qemu" },
      properties = { floating = true } },
    { rule = { name = "Xpdf: Find" },
      properties = { floating = true } },
    { rule = { class = "Xpdf" },
      properties = { maximized_horizontal = true, maximized_vertical = true } },
    { rule = { class = "GQview" },
      properties = { maximized_horizontal = true, maximized_vertical = true } },
-- GM
    { rule = { class = "Emacs" },
       properties = { floating = false, size_hints_honor = false } },
    { rule = { class = "Eclipse" },
       properties = { tag = tags[1][2] } }, -- "Work1"
    { rule = { name = "Java" },
       properties = { tag = tags[1][2] } }, -- "Work1"
    { rule = { class = "Xchat" },
       properties = {
            tag = tags[1][1],
            maximized_horizontal = true,
            maximized_vertical = true
       },
    }, -- "Chat"
    { rule = { class = "Pidgin" },
       properties = {
            tag = tags[1][1],
            maximized_horizontal = true,
            maximized_vertical = true
       },
    }, -- "Chat"
    { rule = { class = "NickServ" },
       properties = {
            tag = tags[1][1],
            maximized_horizontal = true,
            maximized_vertical = true
       },
    }, -- "Chat"
    { rule = { class = "Buddy List" },
       properties = {
            tag = tags[1][1],
            maximized_horizontal = true,
            maximized_vertical = true
       },
    }, -- "Chat"
    { rule = { class = "Skype" },
       properties = { tag = tags[1][1] } }, -- "Chat"
    { rule = { class = "Audacious" },
       properties = { tag = tags[1][4] } }, -- Work3
    { rule = { class = "Thunderbird" },
       properties = {
           tag = tags[screen.count()][5],
           -- maximized_horizontal = true,
           -- maximized_vertical = true,
       },
    }, -- Mail
    { rule = { class = "Mail" },
       properties = {
           tag = tags[screen.count()][5],
           -- maximized_horizontal = true,
           -- maximized_vertical = true,
       },
    }, -- Mail
    { rule = { name = "Firefox" },
       properties = {
           tag = tags[screen.count()][6],
           -- maximized_horizontal = true,
           -- maximized_vertical = true
       },
    }, -- Web
    { rule = { class = "Navigator" },
       properties = {
           tag = tags[screen.count()][6],
           -- maximized_horizontal = true,
           -- maximized_vertical = true
       },
    }, -- Web
    { rule = { class = "Chromium" },
       properties = {
           tag = tags[screen.count()][6],
           maximized_horizontal = true,
           maximized_vertical = true,
       },
    }, -- Web
    { rule = { class = "QupZilla" },
       properties = {
           tag = tags[screen.count()][7],
           -- maximized_horizontal = true,
           -- maximized_vertical = true,
       },
    }, -- Web
    { rule = { class = "Midori" },
       properties = {
           tag = tags[screen.count()][7],
           -- maximized_horizontal = true,
           -- maximized_vertical = true,
       },
    }, -- Web
    { rule = { class = "Xxxterm" },
      properties = { tag = tags[1][6] } }, -- Web
    { rule = { class = "Amule" },
      properties = { tag = tags[1][7] } }, -- Mumule
    { rule = { class = "Ktorrent" },
      properties = { tag = tags[1][7] } }, -- Mumule
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    c:connect_signal("mouse::enter", function(c)
        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
            client.focus = c
        end
    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    elseif not c.size_hints.user_position and not c.size_hints.program_position then
        -- Prevent clients from being unreachable after screen count change
        awful.placement.no_offscreen(c)
    end

    local titlebars_enabled = false
    if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
        -- buttons for the titlebar
        local buttons = awful.util.table.join(
                awful.button({ }, 1, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.move(c)
                end),
                awful.button({ }, 3, function()
                    client.focus = c
                    c:raise()
                    awful.mouse.client.resize(c)
                end)
                )

        -- Widgets that are aligned to the left
        local left_layout = wibox.layout.fixed.horizontal()
        left_layout:add(awful.titlebar.widget.iconwidget(c))
        left_layout:buttons(buttons)

        -- Widgets that are aligned to the right
        local right_layout = wibox.layout.fixed.horizontal()
        right_layout:add(awful.titlebar.widget.floatingbutton(c))
        right_layout:add(awful.titlebar.widget.maximizedbutton(c))
        right_layout:add(awful.titlebar.widget.stickybutton(c))
        right_layout:add(awful.titlebar.widget.ontopbutton(c))
        right_layout:add(awful.titlebar.widget.closebutton(c))

        -- The title goes in the middle
        local middle_layout = wibox.layout.flex.horizontal()
        local title = awful.titlebar.widget.titlewidget(c)
        title:set_align("center")
        middle_layout:add(title)
        middle_layout:buttons(buttons)

        -- Now bring it all together
        local layout = wibox.layout.align.horizontal()
        layout:set_left(left_layout)
        layout:set_right(right_layout)
        layout:set_middle(middle_layout)

        awful.titlebar(c):set_widget(layout)
    end
end)

client.connect_signal("focus", function(c)
                              c.border_color = beautiful.border_focus
                              c.opacity = 1
                           end)
client.connect_signal("unfocus", function(c)
                                c.border_color = beautiful.border_normal
                                c.opacity = 0.7
                             end)
-- }}}
