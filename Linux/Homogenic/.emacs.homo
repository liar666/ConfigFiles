;; Make dabbrev be case sensitive
(setq dabbrev-case-fold-search "case-fold-search")
(setq dabbrev-case-replace nil)
;; Manage aspell
(setq-default ispell-program-name "aspell")
(setq current-language 1)
(ispell-change-dictionary "british")
(defun set-language-english ()
;Set english as ispell language
  (setq current-language 1)
  (ispell-change-dictionary "british")
  (force-mode-line-update)
  (setq sentence-end "[.?!][]\"')}]*\\($\\| $\\|\t\\|  \\)[ \t\n]*");
  (setq sentence-end-double-space t)
)
(defun set-language-french ()
;Set french as ispell language
  (setq current-language 0);
  (ispell-change-dictionary "francais");
  (force-mode-line-update);
  (setq sentence-end "[.?!][]\"')}]*\\($\\| $\\|\t\\|  \\)[ \t\n]*");
  (setq sentence-end-double-space t)
)
(defun toggle-language ()
  "Toggle language between french/english"
  (interactive)
  (cond ((eq current-language 1)
     (set-language-french))
    ((eq current-language 0)
         (set-language-english))
    (t (set-language-french))
   )
)

;; A macro to comment a region whathever the current mode
(defun uncomment-region (beg end)
  "Uncomment a region of text"
  (interactive "r")
  (comment-region beg end -1));

;; A macro to move quickly within a page
(defun moveup ()
  "move 5 lines up"
  (interactive)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
)
;; A macro to move quickly within a page
(defun movedown ()
  "move 5 lines down"
  (interactive)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
)
;; A macro to imitate CTL-ALT-up of Xemacs
(defun moveupc ()
  "move 5 lines up and recenter"
  (interactive)
  (moveup)
  (recenter)
)
;; A macro to imitate CTL-ALT-down of Xemacs
(defun movedownc ()
  "move 5 lines down and recenter"
  (interactive)
  (movedown)
  (recenter)
)

;; M-Del delete word, does not go to next parenthesis!
(global-unset-key "\C-\M-d")
(global-set-key "\C-d" 'delete-char)
(global-set-key "\C-\M-d" 'kill-word)
; DOES NOT WORK if .Xresources is not configured to send C-tab
(global-set-key [(control tab)] 'other-window) ; without screen
(global-set-key "[27;5;9~" 'other-window)    ; within screen

(global-set-key (kbd "C-M-<up>") (quote moveupc))
(global-set-key (kbd "C-M-<down>") (quote movedownc))

(global-set-key (kbd "C-<up>") (quote moveup))
(global-set-key (kbd "C-<down>") (quote movedown))

;; keybiding for ssh console mode!!!
(global-set-key (kbd "M-[ 1 ; 5 A") (quote moveup))
(global-set-key (kbd "M-[ 1 ; 5 B") (quote movedown))
(global-set-key (kbd "M-[ 1 ; 5 C") (quote forward-word))
(global-set-key (kbd "M-[ 1 ; 5 D") (quote backward-word))
(global-set-key (kbd "M-[ 1 ; 5 H") (quote beginning-of-buffer))
(global-set-key (kbd "M-[ 1 ; 5 F") (quote end-of-buffer))
(global-set-key (kbd "M-[ H") (quote move-beginning-of-line))
(global-set-key (kbd "M-[ F") (quote move-end-of-line))
(global-set-key (kbd "M-o h") (quote move-beginning-of-line))
(global-set-key (kbd "M-o f") (quote move-end-of-line))
(global-set-key (kbd "M-o f") (quote move-end-of-line))
(global-set-key (kbd "<select>") (quote move-end-of-line))
(global-set-key (kbd "ESC <deletechar>") (quote kill-word))
(global-set-key (kbd "ESC C-%") (quote query-replace-regexp))

;; Some useful key associations
(global-set-key [f4] (quote toggle-language))
(global-set-key [f5] (quote ispell-buffer))
(global-set-key [f6] (quote ispell-continue))

(global-set-key [f9] (quote dabbrev-expand))

(global-set-key [f10] (quote whitespace-cleanup))
(global-set-key [f11] (quote comment-region))
(global-set-key [f12] (quote uncomment-region))

;; Problems with copy/paste/yank from/to other applications
;; From: http://www.emacswiki.org/emacs/CopyAndPaste
(setq select-active-regions t) ;  active region sets primary X11 selection
(global-set-key [mouse-2] 'mouse-yank-primary)  ; make mouse middle-click only paste from primary X11 selection, not clipboard and kill ring.

(global-set-key "\C-w" 'clipboard-kill-region)
(global-set-key "\M-w" 'clipboard-kill-ring-save)
(global-set-key "\C-y" 'clipboard-yank)

;;(global-set-key [(shift delete)] 'clipboard-kill-region)
;;(global-set-key [(control insert)] 'clipboard-kill-ring-save)
;;(global-set-key [(shift insert)] 'clipboard-yank)

;;(custom-set-variables
;; '(inhibit-startup-screen t))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ediff-merge-split-window-function (quote split-window-vertically))
 '(ediff-split-window-function (quote split-window-horizontally))
 '(inhibit-startup-screen t)
 '(jde-bug-debugger-host-address "127.0.0.1")
 '(jde-debugger (quote ("jdb")))
 '(jde-help-browser-function (quote eww-open-file))
 '(jde-jdk-doc-url
   "/usr/share/doc/openjdk-7-doc/jdk/api/javadoc/doclet/index.html")
 '(show-paren-mode t)
 '(vc-follow-symlinks t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-comment-face ((t (:foreground "brightblack" :slant italic))))
 '(font-lock-constant-face ((t (:foreground "magenta"))))
 '(font-lock-keyword-face ((t (:foreground "brightred"))))
 '(font-lock-string-face ((t (:foreground "brightblue"))))
 '(font-lock-type-face ((t (:foreground "yellow"))))
 '(font-lock-variable-name-face ((t (:foreground "green"))))
 '(highlight ((t (:background "brightcyan" :weight semi-bold))))
 '(minibuffer-prompt ((t (:inverse-video t))))
 '(mode-line ((t (:background "yellow" :foreground "black" :box (:line-width -1 :style released-button)))))
 '(mode-line-highlight ((t (:box (:line-width 2 :color "grey90" :style released-button)))))
 '(show-paren-match ((t (:background "yellow"))))
 '(whitespace-newline ((t (:background "grey70"))))
 '(whitespace-space ((t (:background "white")))))

;; use spaces instead of tabs (tab=4 spaces)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
;; show whitespace chars
(require 'whitespace)
(setq-default whitespace-style '(face tabs spaces newline empty trailing indentation::space)) ;add "lines" to visualize lines that are too long
(global-whitespace-mode 1)

;; puts the scrollbars on the right
(set-scroll-bar-mode 'right)


;; ===== From: http://homepages.inf.ed.ac.uk/s0243221/emacs/
; HighLight current line
(global-hl-line-mode 1)
;; Show line-number in the mode line
(line-number-mode 1)
;; Show column-number in the mode line
(column-number-mode 1)

;; === Change backup behaviour
(setq make-backup-files nil)
;; Enable backup files.
(setq make-backup-files t)
;; Enable versioning with default values (keep five last versions, I think!)
(setq version-control t)
;; Save all backup file in this directory.
(setq backup-directory-alist (quote ((".*" . "~/.emacs_backups/"))))
;; From: https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup-Deletion.html
; deletes excess backup files silently
(setq delete-old-versions t)
; number of oldest-backups to keep
(setq kept-old-versions 2)
; number of newest-backups to keep
(setq kept-new-versions 8)


;; For Groovy/Grails/gsp
(add-to-list 'load-path "~/.emacs.d/lisp/")
;; For gsp
(add-to-list 'auto-mode-alist '("\\.gsp$" . nxml-mode))
;; use groovy-mode when file ends in .groovy or has #!/bin/groovy at start
(autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code." t)
(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))
(add-to-list 'auto-mode-alist '("\.groovy$" . groovy-mode))
;; overwrite default c indentation with 2 spaces to the same amount as "tab-width"
(setq-default c-basic-offset tab-width) ;; TODO: already in hook below
;; remove automatic insertion of closing brackets
;(groovy-electric-mode nil) ;; TODO: already set in hook below
;; make Groovy mode electric by default.
(add-hook 'groovy-mode-hook
          (lambda ()
            (require 'groovy-electric)
;            (groovy-electric-mode nil) ; TODO: does not work
            (setq-default c-basic-offset tab-width)) ; TODO: does not work
)

;; Show only the last opened file, not the list of opened files
(setq inhibit-startup-buffer-menu t)


; For Java
(add-to-list 'load-path "~/.emacs.d/jdee-2.4.1/lisp")
(autoload 'jde-mode "jde" "JDE mode" t)
(setq auto-mode-alist (append '(("\\.java\\'" . jde-mode)) auto-mode-alist))
(put 'downcase-region 'disabled nil)
;;(setq browse-url-browser-function (quote browse-url-firefox))
(setq browse-url-browser-function (quote eww-browse-url))
(add-to-list 'load-path "~/.emacs.d/SrSpeedbar")
(require 'sr-speedbar) ; to manage the files
;(global-set-key (kbd "C-c C-v C-s") (quote sr-speedbar-toggle))
;(global-set-key (kbd "C-c C-v C-i") (quote jde-import-find-and-import))
;(global-set-key (kbd "C-c C-v C-l") (quote jde-gen-println))
;(global-set-key (kbd "C-c C-v C-g") (quote jde-wiz-get-set-methods))
;(global-set-key (kbd "C-c C-v C-n") (quote jde-help-browse-jdk-doc))
;(global-set-key (kbd "C-c C-v C-w") (quote jde-help-symbol))
;(global-set-key (kbd "C-c C-v TAB") (quote jde-complete))
(setq jde-key-bindings (quote
    (("[? ? ?]" . jde-run-menu-run-applet)
     ("[? ? ?]" . jde-build)
     ("[? ? ?]" . jde-compile)
     ("[? ? ?]" . jde-debug)
     ("[? ? ?]" . jde-find)
     ("[? ? ?]" . jde-open-class-at-point)    ; COOL
     ("[? ? ?]" . jde-bsh-run)                ; COOL
     ("[? ? ?]" . jde-help-browse-jdk-doc)    ; GM
     ("[? ? ?]" . jde-save-project)
     ("[? ? ?]" . jde-wiz-update-class-list)
     ("[? ? ?]" . jde-run)
     ("[? ? ?]" . speedbar-frame-mode)        ; GM
     ("[? ? ?]" . jde-jdb-menu-debug-applet)
     ("[? ? ?]" . jde-help-symbol)            ; GM
     ("[? ? ?]" . jde-show-superclass-source)
     ("[? ? ?]" . jde-open-class-at-point)    ; COOL
     ("[? ? ?a]" . jde-wiz-implement-interface)
     ("[? ? ?c]" . jde-gen-class)               ; GM
     ("[? ? ?e]" . jde-wiz-extend-abstract-class)
     ("[? ? ?f]" . jde-gen-try-finally-wrapper)
     ("[? ? ?i]" . jde-import-find-and-import)
     ("[? ? ?j]" . jde-javadoc-autodoc-at-line)
     ("[? ? ?l]" . jde-gen-println)             ; GM
     ("[? ? ?o]" . jde-wiz-override-method)
     ("[? ? ?s]" . sr-speedbar-toggle)          ; GM
     ("[? ? ?t]" . jde-gen-tostring-method)     ; GM
     ("[? ? ?u]" . jde-gen-try-catch-wrapper)   ; COOL
     ("[? ? ?z]" . jde-import-all)
     ("[? ? ?]" . jde-run-etrace-prev)
     ("[? ? ?]" . jde-run-etrace-next)
;     ("[(control c) (control v) (control ?.)]" . jde-complete)
;     ("[(control c) (control v) ?.]" . jde-complete-in-line)
     ("[(control c) (control v) (control ?.)]" . jde-complete-in-line) ; GM
     ("[(control c) (control v) ?\t]" . jde-complete)                  ; GM
     )))
